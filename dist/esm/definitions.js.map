{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface OpeninstallPlugin {\n    configure(options: ConfigOptions): Promise<void>;\n    serialEnabled(options: { enabled: boolean }): Promise<void>;\n    clipBoardEnabled(options: { enabled: boolean }): Promise<void>;\n    init(): Promise<void>;\n    getInstall(): Promise<any>;\n    getInstallCanRetry(): Promise<any>;\n    reportRegister(): Promise<void>;\n    reportEffectPoint(options: { pointId?: string, pointValue?: string }): Promise<void>;\n    addListener(eventName: 'wakeUp', listenerFunc: WakeUpListener): Promise<PluginListenerHandle> & PluginListenerHandle;\n    removeAllListeners(): Promise<void>;\n}\n\nexport interface ConfigOptions {\n    adEnabled: boolean,\n    macDisabled: boolean,\n    imeiDisabled: boolean,\n    gaid: string,\n    oaid: string,\n}\n\nexport declare type WakeUpListener = (status: any) => void;\n\nexport type WakeUpCallback = (message: any | null, err?: any) => void;"]}